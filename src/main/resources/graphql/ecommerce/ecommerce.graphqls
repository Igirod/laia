#import "./ecommerce/product.graphqls"
#import "./ecommerce/productdetail.graphqls"
#import "./ecommerce/merchant.graphqls"
#import "./ecommerce/payment.graphqls"
#import "./ecommerce/imageproduct.graphqls"
#import "./ecommerce/invoice.graphqls"
#import "./ecommerce/user.graphqls"
#import "./ecommerce/invoiceproduct.graphqls"

type Query {
   merchantS(slug: String!): MerchantDTO
   productId(productId: Int!): ProductDTO
   products(page: Int!, merchantId: Int!, status: Int): [ProductDTO]
   productDId(productId: Int!): [ProductDetailDTO]
   merchantId(merchantId: Int!): MerchantDTO
   payments(page: Int!, merchantId: Int, status: Int): [PaymentDTO]
   imagesPId(productId: Int!): [ImageProductDTO]
   invoices(page: Int!, merchantId: Int!, userEmail: String, invoiceStatus: InvoiceStatus): [InvoiceDTO]
   productsTf(page: Int!, typeFilter: TypeFilter): [ProductDTO]
   productDSId(productId: Int!): ProductDetailShortDTO
   gInvoice(invoiceId: Int!): InvoiceDTO
   cUserE(userId: Int!, email: String!, password: String): Int
   lUser(email: String!, password: String!): Int
   gIProducts(invoiceId: Int!, page: Int!): [InvoiceProductDTO]
   gAddressUId(userId: Int!, page: Int!): [AddressDTO]
   combinedShop(slug: String!, userId: Int): CombinedShopDTO
   combinedProduct(productId: Int!, slug: String!, userId: Int): CombinedProductDTO
}

type Mutation {
   cInvoice(merchantId: Int!): InvoiceDTO
   uInvoice(invoiceInputDTO: InvoiceInputDTO!): InvoiceDTO
   aProductI(invoiceId: Int!, productId: Int!) : Int
   uProductI(invoiceId: Int!, productId: Int!, quantity: Int!) : Int
   uInvoiceM(invoiceId: Int!, message: Int!) : Int
   uInvoiceS(invoiceId: Int!, status: InvoiceStatus!) : Int
   uInvoiceN(invoiceId: Int!, note: String!) : Int
   uInvoicePayment(invoiceId: Int!, paymentId: Int!) : Int
   uUser(userId: Int!, email: String, password: String, phone: String, name: String, lastName: String) : Int
   dAddress(addressId: Int!) : Int
   uAddress(addressId: Int!, userId: Int, title: String, lng: String, lat: String, direction: String) : Int
   aAddress(userId: Int!, title: String, lng: String, lat: String, direction: String) : Int
   uInvoiceA(invoiceId: Int!, title: String!, direction: String!) : Int
}

type CombinedShopDTO {
   merchantId: Int!
   merchantTitle: String
   products: [ProductDTO]
   invoiceId: Int
   invoiceCount: Int
}

type CombinedProductDTO {
   merchantId: Int!
   merchantTitle: String
   productId: Int
   productTitle: String
   productPrice: Float
   images: [ImageProductDTO]
   productStock: Int
   invoiceId: Int
   invoiceCount: Int
}